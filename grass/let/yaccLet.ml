type token =
  | EOF
  | LET
  | EQ
  | IN
  | LPAREN
  | RPAREN
  | SEMICOLON
  | SUCC
  | GETC
  | PUTC
  | W
  | VAR of (string)

open Parsing;;
# 3 "yaccLet.mly"
open Parse
open Let
# 20 "yaccLet.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* LET *);
  258 (* EQ *);
  259 (* IN *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* SEMICOLON *);
  263 (* SUCC *);
  264 (* GETC *);
  265 (* PUTC *);
  266 (* W *);
    0|]

let yytransl_block = [|
  267 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\005\000\005\000\006\000\006\000\
\006\000\007\000\007\000\007\000\008\000\008\000\004\000\004\000\
\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\005\000\000\000\002\000\006\000\003\000\
\001\000\003\000\001\000\002\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\016\000\018\000\
\017\000\019\000\015\000\000\000\001\000\003\000\000\000\000\000\
\006\000\000\000\000\000\000\000\011\000\004\000\000\000\000\000\
\000\000\000\000\000\000\014\000\012\000\000\000\010\000\000\000\
\008\000\000\000\013\000\000\000\007\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\021\000\016\000\022\000\023\000\029\000"

let yysindex = "\002\000\
\004\255\000\000\066\255\000\000\006\000\004\255\000\000\000\000\
\000\000\000\000\000\000\066\255\000\000\000\000\066\255\005\255\
\000\000\017\255\066\255\061\255\000\000\000\000\037\255\006\255\
\045\255\061\255\017\255\000\000\000\000\061\255\000\000\053\255\
\000\000\029\255\000\000\017\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\013\255\000\000\000\000\013\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\011\000\000\000\253\255\004\000\231\255\240\255\000\000"

let yytablesize = 258
let yytable = "\012\000\
\009\000\033\000\001\000\025\000\003\000\013\000\018\000\030\000\
\015\000\032\000\037\000\015\000\002\000\034\000\005\000\024\000\
\014\000\019\000\017\000\028\000\020\000\028\000\000\000\007\000\
\008\000\009\000\010\000\011\000\028\000\000\000\028\000\036\000\
\026\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\026\000\000\000\027\000\007\000\008\000\009\000\010\000\011\000\
\026\000\031\000\000\000\007\000\008\000\009\000\010\000\011\000\
\026\000\035\000\000\000\007\000\008\000\009\000\010\000\011\000\
\020\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\007\000\008\000\009\000\010\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000"

let yycheck = "\003\000\
\000\000\027\000\001\000\020\000\001\001\000\000\002\001\002\001\
\012\000\026\000\036\000\015\000\000\000\030\000\002\001\019\000\
\006\000\001\001\015\000\023\000\004\001\025\000\255\255\007\001\
\008\001\009\001\010\001\011\001\032\000\255\255\034\000\003\001\
\004\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\004\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001"

let yynames_const = "\
  EOF\000\
  LET\000\
  EQ\000\
  IN\000\
  LPAREN\000\
  RPAREN\000\
  SEMICOLON\000\
  SUCC\000\
  GETC\000\
  PUTC\000\
  W\000\
  "

let yynames_block = "\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 20 "yaccLet.mly"
( _1 )
# 172 "yaccLet.ml"
               : string Let.exp))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'single) in
    Obj.repr(
# 24 "yaccLet.mly"
( [_1] )
# 179 "yaccLet.ml"
               : 'exp))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'single) in
    let _2 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 26 "yaccLet.mly"
( _1::_2 )
# 187 "yaccLet.ml"
               : 'exp))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'var) in
    let _3 = (peek_val parser_env 2 : 'args) in
    let _5 = (peek_val parser_env 0 : 'body) in
    Obj.repr(
# 30 "yaccLet.mly"
( { name=_2; bind=_3; body=_5 } )
# 196 "yaccLet.ml"
               : 'single))
; (fun parser_env ->
    Obj.repr(
# 34 "yaccLet.mly"
( [] )
# 202 "yaccLet.ml"
               : 'args))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'var) in
    let _2 = (peek_val parser_env 0 : 'args) in
    Obj.repr(
# 36 "yaccLet.mly"
( _1::_2 )
# 210 "yaccLet.ml"
               : 'args))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'var) in
    let _4 = (peek_val parser_env 2 : 'app) in
    let _6 = (peek_val parser_env 0 : 'body) in
    Obj.repr(
# 40 "yaccLet.mly"
( let (abind,abody) = _6 in ((_2,_4)::abind, abody) )
# 219 "yaccLet.ml"
               : 'body))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'app) in
    let _3 = (peek_val parser_env 0 : 'body) in
    Obj.repr(
# 42 "yaccLet.mly"
( let (abind,abody) = _3 in (("_",_1)::abind, abody) )
# 227 "yaccLet.ml"
               : 'body))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'app) in
    Obj.repr(
# 44 "yaccLet.mly"
( ([], _1) )
# 234 "yaccLet.ml"
               : 'body))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'app) in
    Obj.repr(
# 48 "yaccLet.mly"
( _2 )
# 241 "yaccLet.ml"
               : 'app))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'var) in
    Obj.repr(
# 50 "yaccLet.mly"
( LVar _1 )
# 248 "yaccLet.ml"
               : 'app))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'app) in
    let _2 = (peek_val parser_env 0 : 'appR) in
    Obj.repr(
# 52 "yaccLet.mly"
( LApp(_1,_2) )
# 256 "yaccLet.ml"
               : 'app))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'app) in
    Obj.repr(
# 56 "yaccLet.mly"
( _2 )
# 263 "yaccLet.ml"
               : 'appR))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'var) in
    Obj.repr(
# 58 "yaccLet.mly"
( LVar _1 )
# 270 "yaccLet.ml"
               : 'appR))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 62 "yaccLet.mly"
( _1 )
# 277 "yaccLet.ml"
               : 'var))
; (fun parser_env ->
    Obj.repr(
# 64 "yaccLet.mly"
( strSucc )
# 283 "yaccLet.ml"
               : 'var))
; (fun parser_env ->
    Obj.repr(
# 66 "yaccLet.mly"
( strPutc )
# 289 "yaccLet.ml"
               : 'var))
; (fun parser_env ->
    Obj.repr(
# 68 "yaccLet.mly"
( strGetc )
# 295 "yaccLet.ml"
               : 'var))
; (fun parser_env ->
    Obj.repr(
# 70 "yaccLet.mly"
( strW )
# 301 "yaccLet.ml"
               : 'var))
(* Entry entry *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let entry (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : string Let.exp)
